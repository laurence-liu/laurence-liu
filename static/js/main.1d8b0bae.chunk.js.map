{"version":3,"sources":["components/Title/Title.js","components/Menu/Menu.js","components/Menu/MenuList.js","components/Menu/items.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","React","Component","MenuItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseOver","console","log","state","id","name","onMouseEnter","MenuList","_ref","menuComponent","items","map","item","index","Menu_Menu","key","Footer","App","route","components_Title_Title","Menu_MenuList","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAaeA,0LARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,iCAJIE,IAAMC,YCgCXC,qBA/BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,YAAc,WACVC,QAAQC,IAAI,QAPZT,EAAKU,MAAQ,CACTC,GAAI,GACJC,KAAM,IAJKZ,wEAaf,OACIR,EAAAC,EAAAC,cAAA,OAAKmB,aAAcV,KAAKI,aACpBf,EAAAC,EAAAC,cAAA,KAAGiB,GAAG,YAAYR,KAAKJ,MAAMa,cAhBtBhB,IAAMC,YCWdiB,EAXE,SAAAC,GAAe,IACtBC,EADsBD,EAAZE,MACYC,IAAI,SAACC,EAAMC,GACnC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAMC,IAAKF,EAAOT,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,SAErD,OACIpB,EAAAC,EAAAC,cAAA,WACKsB,ICTAC,EAAQ,CACjB,CACIN,GAAI,EACJC,KAAM,UAEV,CACID,GAAI,EACJC,KAAM,UAEV,CACID,GAAI,EACJC,KAAM,YAEV,CACID,GAAI,EACJC,KAAM,WCFCW,gMARP,OACI/B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACdH,EAAAC,EAAAC,cAAA,kBAJKE,IAAMC,YCuBZ2B,cAlBX,SAAAA,IAAc,IAAAxB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACVxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,QACKO,MAAQ,CACTe,MAAO,QAHDzB,wEAQV,OACIR,EAAAC,EAAAC,cAAA,OAAKiB,GAAG,cACJnB,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,CAAUV,MAAOA,IACjBzB,EAAAC,EAAAC,cAACkC,EAAD,cAbE/B,aCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d8b0bae.chunk.js","sourcesContent":["import React from 'react'\nimport './Title.css'\n\nclass Title extends React.Component {\n    render() {\n        return(\n            <nav className=\"navStyle\">\n                <p>LAURENCE LIU</p>\n            </nav>\n        )\n    }\n}\n\nexport default Title","import React from 'react'\nimport './Menu.css'\n\nclass MenuItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: '',\n            name: ''\n        }\n    }\n\n    onMouseOver = () => {\n        console.log('A_A')\n    }\n\n    render() {\n        return (\n            <div onMouseEnter={this.onMouseOver}>\n                <p id='itemName'>{this.props.name}</p>\n            </div>\n        )\n    }\n}\n\n\n\n// const MenuItem = ({ id, name }) => {\n//     return (\n//         <div onClick={this.handleClick}>\n//             <p id='itemName'>{name}</p>\n//         </div>\n//     )   \n// }\n\nexport default MenuItem","import React from 'react'\nimport Menu from './Menu'\n\nconst MenuList = ({ items }) => {\n    const menuComponent = items.map((item, index) => {\n        return <Menu key={index} id={item.id} name={item.name} />\n    })\n    return (\n        <div>\n            {menuComponent}\n        </div>\n    )\n}\n\nexport default MenuList","export const items = [\n    {\n        id: 1, \n        name: 'GitHub',\n    },\n    {\n        id: 2, \n        name: 'Medium',\n    }, \n    {\n        id: 3,\n        name: 'LinkedIn', \n    }, \n    {\n        id: 3,\n        name: 'Recipe', \n    }\n];","import React from 'react'\nimport './Footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return(\n            <footer className='footerStyle'>\n                <p></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer","import React, { Component } from 'react'\nimport Title from './components/Title/Title'\nimport MenuList from './components/Menu/MenuList'\nimport { items } from './components/Menu/items'\nimport './App.css'\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            route: 'home',\n        }\n    }\n\n    render() {\n        return (\n            <div id='background'>\n                <Title />\n                <MenuList items={items} />\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}