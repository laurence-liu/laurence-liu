{"version":3,"sources":["me.png","github.png","medium.png","linkedin.png","components/Title/Title.js","components/Menu/Menu.js","components/Menu/MenuList.js","components/Menu/items.js","components/Footer/Footer.js","components/Background/Background.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","className","React","Component","MenuItem","onClick","_this","props","name","console","log","onRouteChange","window","open","onMouseOver","id","onMouseEnter","this","MenuList","_ref","items","menuComponent","map","item","index","Menu_Menu","key","Footer","Background","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","route","imgPath","layout","src","require","App","setState","components_Background_Background","components_Title_Title","Menu_MenuList","components_Footer_Footer","Boolean","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01744923.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.1884b955.png\";","module.exports = __webpack_public_path__ + \"static/media/github.a12933aa.png\";","module.exports = __webpack_public_path__ + \"static/media/medium.d58d3310.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.9d1bbe08.png\";","import React from 'react'\nimport './Title.css'\n\nclass Title extends React.Component {\n    render() {\n        return(\n            <nav className=\"navStyle\">\n                <p>LAURENCE LIU</p>\n            </nav>\n        )\n    }\n}\n\nexport default Title","import React from 'react'\nimport './Menu.css'\n\nclass MenuItem extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         id: '',\n    //         name: ''\n    //     }\n    // }\n\n    onClick = () => {\n        switch (this.props.name) {\n            case 'About':\n                console.log(this.props.onRouteChange)\n                // console.log(this.props.onRouteChange)\n                break\n            case 'GitHub':\n                window.open('https://github.com/laurence-liu')\n                break\n            case 'Medium':\n                window.open('https://medium.com/@laurence.liuuu')\n                break\n            case 'LinkedIn':\n                window.open('https://www.linkedin.com/in/%E5%86%A0%E7%94%AB-%E5%8A%89-397125135/')\n                break\n        }\n    }\n\n    onMouseOver = () => {\n        switch (this.props.name) {\n            case 'About':\n                this.props.onRouteChange('About')\n                break\n            case 'GitHub':\n                this.props.onRouteChange('GitHub')\n                break\n            case 'Medium':\n                this.props.onRouteChange('Medium')\n                break\n            case 'LinkedIn':\n                this.props.onRouteChange('LinkedIn')\n                break\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <p id='itemName' onMouseEnter={this.onMouseOver} onClick={this.onClick} >{this.props.name}</p>\n            </div>\n        )\n    }\n}\n\nexport default MenuItem","import React from 'react'\nimport Menu from './Menu'\n\nconst MenuList = ({ items, onRouteChange }) => {\n    // const { onRouteChange } = this.props;\n\n    const menuComponent = items.map((item, index) => {\n        return <Menu key={index} id={item.id} name={item.name} onRouteChange={onRouteChange}/>\n    })\n\n    return (\n        <div>\n            {menuComponent}\n        </div>\n    )\n}\n\nexport default MenuList","export const items = [\n    {\n        id: 1, \n        name: 'About',\n    },\n    {\n        id: 2, \n        name: 'GitHub',\n    }, \n    {\n        id: 3,\n        name: 'Medium', \n    }, \n    {\n        id: 4,\n        name: 'LinkedIn', \n    }\n];","import React from 'react'\nimport './Footer.css'\n\nclass Footer extends React.Component {\n    render() {\n        return(\n            <footer className='footerStyle'>\n                <p></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer","import React from 'react'\nimport './Background.css'\n\nclass Background extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { route: '', imgPath: '' }\n    }\n\n    render() {\n        var layout\n        switch (this.props.route) {\n            case 'About':\n                layout =\n                    <div>\n                        <img className='background' src={require('../../me.png')} />\n                    </div>\n                break\n            case 'GitHub':\n                layout =\n                    <div>\n                        <img className='background' src={require('../../github.png')} />\n                    </div>\n                break\n            case 'Medium':\n                layout =\n                    <div>\n                        <img className='background' src={require('../../medium.png')} />\n                    </div>\n                break\n            case 'LinkedIn':\n                layout =\n                    <div>\n                        <img className='background' src={require('../../linkedin.png')} />\n                    </div>\n                break\n        }\n\n        return (\n            // <div className='background' style={{ backgroundImage: url('https://robohash.org/500?200x200') }} />\n            <div >\n                {/* <img className='background' src={require('../../me.jpg')} /> */}\n                {layout}\n            </div>\n        )\n    }\n}\n\nexport default Background","import React, { Component } from 'react'\nimport Title from '../components/Title/Title'\nimport MenuList from '../components/Menu/MenuList'\nimport { items } from '../components/Menu/items'\nimport './App.css'\nimport Footer from '../components/Footer/Footer';\nimport Background from '../components/Background/Background';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            route: 'home',\n        }\n    }\n\n    onRouteChange = (route) => {\n        switch (route) {\n            case 'About':\n                break\n            case 'GitHub':\n                break\n            case 'Medium':\n                break\n            case 'LinkedIn':\n                break\n        }\n        this.setState({ route: route })\n    }\n\n    render() {\n        const { route } = this.state\n        return (\n            <div>\n                <div>\n                    <Background route={route} onRouteChange={this.onRouteChange} />\n                </div>\n\n                <div id='background'>\n                    <Title />\n                    <MenuList items={items} onRouteChange={this.onRouteChange} />\n                    <Footer />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}